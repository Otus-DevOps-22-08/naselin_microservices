---
- hosts: all
  become: true
  name: Setup all k8s nodes
  tasks:
  # Install Docker and its dependent components
  - name: Install packages that allow apt to be used over HTTPS
    ansible.builtin.apt:
      state: present
      update_cache: true
      pkg:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

  - name: Add an apt signing key for Docker
    ansible.builtin.apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    ansible.builtin.apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable
      state: present

  - name: Install docker and its dependecies
    ansible.builtin.apt:
      state: present
      update_cache: true
      pkg:
        - docker-ce
        - docker-ce-cli
        - containerd.io

  - name: Add ubuntu user to docker group
    ansible.builtin.user:
      name: ubuntu
      group: docker

  #  Kubelet will not start if the system has swap enabled
  - name: Remove swapfile from /etc/fstab
    ansible.posix.mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    ansible.builtin.command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Prepare runtime
    ansible.builtin.shell: |
      cat <<EOF | tee /etc/modules-load.d/containerd.conf
      overlay
      br_netfilter
      EOF
      modprobe overlay
      modprobe br_netfilter
      cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF
      sysctl --system
      containerd config default | tee /etc/containerd/config.toml
      sed -i -e "s?SystemdCgroup = false?SystemdCgroup = true?g" /etc/containerd/config.toml

  - name: Restart containerd
    ansible.builtin.service:
      name: containerd
      state: restarted

  # Installing kubelet, kubeadm and kubectl
  - name: Add an apt signing key for Kubernetes
    ansible.builtin.apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    ansible.builtin.apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    ansible.builtin.apt:
      state: present
      update_cache: true
      pkg:
        - kubelet
        - kubeadm
        - kubectl

# Setup master node
- hosts: master
  become: true
  name: Setup master node
  tags: master
  tasks:
    - name: What if the Kubernetes cluster already initialized?
      ansible.builtin.stat:
        path: /var/lib/etcd
      register: register_etcd

    - name: Initialize the Kubernetes cluster using kubeadm
      ansible.builtin.command: kubeadm init \
        --pod-network-cidr=10.244.0.0/16
      when: not register_etcd.stat.exists

    - name: Create kubectl config dir
      ansible.builtin.file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: 0755
      when: not register_etcd.stat.exists

    - name: Setup kubeconfig for ubuntu user
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: true
        owner: ubuntu
        group: ubuntu
        mode: 0600
      when: not register_etcd.stat.exists

    - name: Install calico pod network
      become: false
      ansible.builtin.command: "{{ item }}"
      with_items:
        - kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml
        - curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/custom-resources.yaml -O
        - sed -i -e "s?192.168.0.0/16?10.244.0.0/16?g" custom-resources.yaml
        - kubectl apply -f custom-resources.yaml
      args:
        chdir: $HOME
      when: not register_etcd.stat.exists

    - name: Generate join command
      ansible.builtin.command: kubeadm token create --print-join-command
      register: join_command
      when: not register_etcd.stat.exists

    - name: Copy join command to local file
      become: false
      ansible.builtin.copy:
        content: "{{ join_command.stdout_lines[0] }}"
        dest: ./join-command
        mode: 0600
      delegate_to: localhost
      when: not register_etcd.stat.exists

# Setup worker node
- hosts: worker
  become: true
  name: Join worker node to the Kubernetes cluster
  tags: worker
  tasks:
    - name: Copy the join command to server location
      ansible.builtin.copy:
        src: ./join-command
        dest: /tmp/join-command.sh
        mode: 0777
      register: register_join

    - name: Join the node to cluster
      ansible.builtin.command: sh /tmp/join-command.sh
      when: register_join
